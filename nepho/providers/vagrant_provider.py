# coding: utf-8
# flake8: noqa

import os
from os import path
import subprocess
import yaml

import vagrant
import nepho
from nepho.core.common import cwd
#from nepho.core import common, resource
#from nepho.core import  provider
#import nepho.core.provider

NEPHO_VAGRANT_BOILER_PLATE = """#
# Autogenerated by nepho's vagrant provider.
#
# Any changes here will be overwritten.
#
"""


class VagrantProvider(nepho.core.provider.AbstractProvider):
    """
    An infrastructure provider class for Vagrant

    If you set a config value "vagrant_provider" it sill use that non-default provider.

    """

    PROVIDER_ID = "vagrant"
    TEMPLATE_FILENAME = "Vagrantfile"

    def __init__(self, config, scenario=None):
        nepho.core.provider.AbstractProvider.__init__(self, config, scenario)
        self.vagrantfile_path = os.path.join(
            self.scenario.context['cloudlet']['path'], 'resources', self.scenario.context['blueprint']['name'])

    def deploy(self):
        # FIXME: For the moment, we are just using the Vagrantfile inside the
        # cloudlet.  We should move the template-processed Vagrantfile into a
        # working directory along with the payload, then run it from there.

        vagrant_provider = self.config.get("vagrant_provider")

        with cwd(self.vagrantfile_path):
            v = vagrant.Vagrant()
            vm_name = None
            try:
                print 'Nepho Elves are now building your Stack.... this may take a couple of minutes.'
                v.up(provider=vagrant_provider, vm_name=vm_name)
                print 'Vagrant Environment created! Access your stack with "nepho stack access <cloudlet> <blueprint>" or "vagrant ssh"'
            except subprocess.CalledProcessError:
                print "Vagrant exited with non-zero code, but your VM is likely running. Please use the status subcommand to check."

    def status(self):
        with cwd(self.vagrantfile_path):
            v = vagrant.Vagrant()
            status = v.status()
            try:
                status['remote_user'] = v.user()
                status['hostname'] = v.hostname()
                status['port'] = v.port()
                status['keyfile'] = v.keyfile()
                status['conf'] = v.conf()
            except Exception:
                pass
            return status

    def access(self):
        with cwd(self.vagrantfile_path):
            v = vagrant.Vagrant()
            ssh_connect_string = v.user_hostname_port()
            vagrant_binary = vagrant.VAGRANT_EXE
            os.execlp(vagrant_binary, "", "ssh")

    def destroy(self):
        """Bring down a vagrant instance."""
        with cwd(self.vagrantfile_path):
            v = vagrant.Vagrant()
            v.destroy()

    def _vm_name(self):
        """Helper method to generate the name for this VM."""
        cloudlet_name = self.scenario.cloudlet.name
        blueprint_name = self.scenario.blueprint.name
        return "%s-%s" % (cloudlet_name, blueprint_name)
